// Importeer RM definities en libraries
#include "RM1xx-defs.h"
#include "sleep.sblib"
#include "bme280.sblib"
#include "sds011.sblib"


// Definieer de zend interval en eerste zend interval
// #define INTERVAL ( 1 * 60 * 1000 ) // 1 minuut


#define INTERVAL ( 5 * 60 * 1000 ) // 5 minuten

#define FIRSTINT ( 10 * 1000 ) // 10 seconden

// Definieer de benodigde variabelen
DIM data$
DIM rc
DIM joined
DIM temp$

// Join is geslaagd
// Herstart de timer met de interval voor het eerste packet
function LoraJoined() As Integer
	// Schedule first transmission
//	PRINT "Joined\n"
	TimerCancel(1)
	joined = 1

	// Forceer weer naar SF7
	// Haal commentaar bij onderstaande twee regels weg als de node
	// heel goed bereik heeft zodat zo snel mogelijk gezonden wordt
	//temp$ = "5"
	//rc = LORAMACSetOption(LORAMAC_OPT_DATA_RATE, temp$)

    TimerStart(1, FIRSTINT, 0)
endfunc 1

// Verzenden van een packet is afgerond, inclusief wachten op retour data
function LoraTxComplete() As Integer
endfunc 1

// Verzenden van data is mislukt met een timeout
function LoraTxTimeout() As Integer
endfunc 1

// Zend data
// Cancel een eventueel lopende timer,
// controleer of we al gejoined zijn en zend data als dat het geval is.
// Herstart join als we nog niet gejoined zijn.
// Start de timer opnieuw voor de volgende poging.
FUNCTION SendData() AS Integer
    DIM pressure
	DIM temp
	DIM humidity
	DIM iChr
	DIM iResult
	DIM sds$
	DIM pm10
	DIM pm25
	Dim BinaryData$
	DIM datarate$
	DIM dr$

	// PRINT "SendData, joined = ";joined;"\n"
	TimerCancel(1)
	IF joined == 1 THEN
		// Binary Data
		// Temperature mulplied 100, signed int16 index 0,1  
		// Humidity 2 bytes unsigned index 2,3
		// Pressure 2 bytes unsigned index 4,5
		// SDS011 PM25 2 bytes unsigned index 6,7
		// SDS011 PM10 2 bytes unsigned index 8,9
		BinaryData$ = "\00\00\00\00\00\00\00\00\00\00"
		temp = 0
		pressure = 0
		humidity = 0
		pm25 = 0
		pm10 = 0 
		
		
		BME280_Read_Raw()

		temp = BME280_Read_Temp()

		pressure = BME280_Read_Pressure()
		// Get rid of 1 decimal so it fits in two bytes
		pressure = pressure/10
		
		humidity = BME280_Read_Humidity()
		// Get rid of 1 decimal so it fits in two bytes
		humidity = humidity/10
		
		SDS011Start()
		Sleep(30000)
		sds$=SDS011ReadData(1,1)
		SDS011Sleep()

		iChr = STRGETCHR(sds$,0)
		// Alleen zenden als er valide fijnstof data gelezen is
		IF iChr == 0xC0 THEN
			pm25 = SDS011GetPM25(sds$)
			pm10 = SDS011GetPM10(sds$)

			iResult = StrSetChr(BinaryData$,temp/256,0)
			iResult = StrSetChr(BinaryData$,temp%256,1)
			
			iResult = StrSetChr(BinaryData$,humidity/256,2)
			iResult = StrSetChr(BinaryData$,humidity%256,3)
			
			
			iResult = StrSetChr(BinaryData$,pressure/256,4)
			iResult = StrSetChr(BinaryData$,pressure%256,5)

			iResult = StrSetChr(BinaryData$,pm25/256,6)
			iResult = StrSetChr(BinaryData$,pm25%256,7)

			iResult = StrSetChr(BinaryData$,pm10/256,8)
			iResult = StrSetChr(BinaryData$,pm10%256,9)
			

			// PRINT "Sending data\n"
			rc = LORAMACTxData(1,BinaryData$,0)
		ENDIF
		// PRINT "Send rc:";rc;"\n"

		// Interval afhankelijk van zend snelheid
		// om binnen de 30 seconden per dag te blijven (fair access policy van TTN)
		// (Werkelijke interval is + 30 seconden ivm lezen fijnstof sensor)
		rc = LORAMACGetOption(LORAMAC_OPT_DATA_RATE, datarate$)
		IF rc == 0 THEN
			dr$ = "5"
			IF StrCmp(datarate$, dr$) == 0 THEN
				TimerStart(1, 120 * 1000, 0)
			ELSE
				dr$ = "4"
				IF StrCmp(datarate$, dr$) == 0 THEN
					TimerStart(1, 240 * 1000, 0)
				ELSE
					dr$ = "3"
					IF StrCmp(datarate$, dr$) == 0 THEN
						TimerStart(1, 480 * 1000, 0)
					ELSE
						dr$ = "2"
						IF StrCmp(datarate$, dr$) == 0 THEN
							TimerStart(1, 960 * 1000, 0)
						ELSE
							TimerStart(1, 30 * 60 * 1000, 0)
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		ELSE
			TimerStart(1, INTERVAL, 0)
		ENDIF
	ELSE
		// PRINT "Attemp join again\n"
		rc = LORAMACJoin(1)
		TimerStart(1, INTERVAL, 0)
	ENDIF
ENDFUNC 1

// Handel fout condities af. (Negeer ze gewoon)
SUB HandleOnError()
	PRINT "\nERROR Handler called!\n"
ENDSUB

// Handel ontvangen data af (negeer voor nu)
FUNCTION LoraRxData() as INTEGER
	//PRINT "Data received"
ENDFUNC 1

// main code, zet alle event handlers.
ONEVENT EVTMR1 				CALL SendData
ONEVENT EVLORAMACJOINED 	CALL LoraJoined
ONEVENT EVLORAMACTXCOMPLETE CALL LoraTxComplete
ONEVENT EVLORAMACTXTIMEOUT 	CALL LoraTxTimeout
ONEVENT EVLORAMACRXDATA 	CALL LoraRxData

ONERROR NEXT HandleOnError
ONFATALERROR NEXT HandleOnError

// Maak de te zenden data leeg.
data$ = ""

// Initialiseer BME sensor
rc = BME280_Open(BME280_OVERSAMPLE1,BME280_OVERSAMPLE1,BME280_OVERSAMPLE1,0)
if (rc == 0) then
    // print "BME open\nRead callibration\n"
    BME280_ReadCallibarationVals()

	Sleep(2000)

	// We want the uart clean before we open it for the SDS011
	UartClose()
	
	// Set SDS011 to sleep
	SDS011Sleep()

    // PRINT "\nstarting LoRaWAN operation\n"

    // Start LoRaWAN, Start timer en start Join procedure
    joined = 0
    
	// Zet naar SF7
	temp$ = "5"
	rc = LORAMACSetOption(LORAMAC_OPT_DATA_RATE, temp$)

	// PRINT "Start joining\n"
	// PRINT "Be sure to disconnect tx/rx from Laird because of SDS011.\n"
    rc = LORAMACJoin(1)

    TimerStart(1, INTERVAL, 0)
	
	// Loop forever
	do
		WAITEVENT
	until 0	
	
else
    print "BME280 failed "
    print "\nFailed to open I2C interface with error code "
    print rc
    print "\n Leaving application, nothing to do!\n"
endif
